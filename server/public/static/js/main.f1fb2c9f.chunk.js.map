{"version":3,"sources":["apolloClient.js","queries.js","components/Movie.js","components/NowPlayingMovies.js","components/NowPlaying.js","components/SearchedMovies.js","components/Search.js","components/SearchedByGenreMovies.js","components/SearchByGenre.js","components/DetailView.js","components/Detail.js","components/TopRatedMovies.js","components/TopRated.js","components/UpcomingMovies.js","components/Upcoming.js","components/PopularMovies.js","components/Popular.js","App.js","index.js"],"names":["client","ApolloClient","uri","NOW_PLAYING","gql","_templateObject","TOP_RATED","_templateObject2","POPULAR","_templateObject3","UPCOMING","_templateObject4","SEARCH","_templateObject5","SEARCH_BY_GENRE","_templateObject6","MOVIE_DETAIL","_templateObject7","_templateObject8","Movie","_ref","movie","genresList","react_default","a","createElement","className","react_router_dom","to","concat","id","src","poster_path","alt","title","vote_average","genres","convertgenresList","forEach","genre","list","push","map","key","name","convertGenres","genre_ids","NowPlayingMovies","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollLoading","bind","assertThisInitialized","document","documentElement","scrollHeight","window","innerHeight","pageYOffset","body","scrollTop","onLoadMore","addEventListener","removeEventListener","_this2","nowPlaying","components_Movie","Component","NowPlayingQuery","react_apollo_esm","query","variables","page","data","fetchMore","error","loading","components_NowPlayingMovies","movies","totalPage","total_pages","newPage","Math","ceil","length","updateQuery","prev","_ref2","fetchMoreResult","update","$push","SearchedMovies","searchTitle","search","Search","match","params","encodeURI","movieTitle","components_SearchedMovies","_ref3","SearchedByGenreMovies","genreIndex","findIndex","genreId","genreSearch","index","SearchByGenre","genre_id","parseInt","components_SearchedByGenreMovies","DetailView","detail","recommendations","credits","trailers","IMG_URL","movieBackground","backgroundImage","backdrop_path","MovieTrailers","_Component","options","trailer","label","value","state","handleSelectChange","inherits","createClass","selected","setState","_this$state","react_select_browser_esm","onChange","classNamePrefix","allow","frameBorder","allowFullScreen","detailMovies","width","style","original_title","vote_count","release_date","runtime","tagline","overview","crew","cast","newCredits","filter","item","job","toConsumableArray","creditsWidth","profile_path","character","creditsList","recommendationsMovies","Detail","movie_id","movieId","components_DetailView","TopRatedMovies","topRated","TopRated","components_TopRatedMovies","UpcomingMovies","upComing","Upcoming","components_UpcomingMovies","popularMovies","popular","Popular","PopularMovies","App","handleKeyDown","e","keyCode","target","encodeURIComponent","history","printSubMenus","path","menu","checked","location","pathname","type","placeholder","onKeyDown","react_router","component","NowPlaying","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f1fb2c9f.chunk.js","sourcesContent":["import ApolloClient from \"apollo-boost\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"/graphql\"\r\n});\r\n\r\nexport default client;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const NOW_PLAYING = gql`\r\n  query getNowPlaying($page: Int!) {\r\n    nowPlaying(page: $page) {\r\n      movies {\r\n        id\r\n        title\r\n        vote_count\r\n        vote_average\r\n        poster_path\r\n        release_date\r\n        original_title\r\n        genre_ids\r\n      }\r\n      total_pages\r\n    }\r\n    genresList {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TOP_RATED = gql`\r\n  query getTopRated($page: Int!) {\r\n    topRated(page: $page) {\r\n      movies {\r\n        id\r\n        title\r\n        vote_count\r\n        vote_average\r\n        poster_path\r\n        release_date\r\n        original_title\r\n        genre_ids\r\n      }\r\n      total_pages\r\n    }\r\n    genresList {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const POPULAR = gql`\r\n  query getPopular($page: Int!) {\r\n    popular(page: $page) {\r\n      movies {\r\n        id\r\n        title\r\n        vote_count\r\n        vote_average\r\n        poster_path\r\n        release_date\r\n        original_title\r\n        genre_ids\r\n      }\r\n      total_pages\r\n    }\r\n    genresList {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPCOMING = gql`\r\n  query getUpcoming($page: Int!) {\r\n    upComing(page: $page) {\r\n      movies {\r\n        id\r\n        title\r\n        vote_count\r\n        vote_average\r\n        poster_path\r\n        release_date\r\n        original_title\r\n        genre_ids\r\n      }\r\n      total_pages\r\n    }\r\n    genresList {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SEARCH = gql`\r\n  query searchTitleMovies($movieTitle: String!, $page: Int!) {\r\n    search(title: $movieTitle, page: $page) {\r\n      movies {\r\n        id\r\n        title\r\n        vote_count\r\n        vote_average\r\n        poster_path\r\n        release_date\r\n        original_title\r\n        genre_ids\r\n      }\r\n      total_pages\r\n    }\r\n    genresList {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SEARCH_BY_GENRE = gql`\r\n  query genreSearchMovies($genreId: Int!, $page: Int!) {\r\n    genreSearch(genre: $genreId, page: $page) {\r\n      movies {\r\n        id\r\n        title\r\n        vote_count\r\n        vote_average\r\n        poster_path\r\n        release_date\r\n        original_title\r\n        genre_ids\r\n      }\r\n      total_pages\r\n    }\r\n    genresList {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MOVIE_TRAILER = gql`\r\n  query getMovieTrailers($movieId: Int!) {\r\n    trailers(movie_id: $movieId) {\r\n      id\r\n      key\r\n      name\r\n      site\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MOVIE_DETAIL = gql`\r\n  query getMovieDetails($movieId: Int!) {\r\n    detail(movie_id: $movieId) {\r\n      id\r\n      title\r\n      original_title\r\n      tagline\r\n      adult\r\n      vote_count\r\n      vote_average\r\n      poster_path\r\n      release_date\r\n      backdrop_path\r\n      runtime\r\n      overview\r\n      genres {\r\n        id\r\n        name\r\n      }\r\n    }\r\n    # similar(movie_id: $movieId, page: 1) {\r\n    #   movies {\r\n    #     id\r\n    #     title\r\n    #     vote_average\r\n    #     poster_path\r\n    #   }\r\n    #   total_pages\r\n    # }\r\n    trailers(movie_id: $movieId) {\r\n      id\r\n      key\r\n      name\r\n      site\r\n    }\r\n    recommendations(movie_id: $movieId, page: 1) {\r\n      movies {\r\n        id\r\n        title\r\n        vote_average\r\n        poster_path\r\n      }\r\n      total_pages\r\n    }\r\n    credits(movie_id: $movieId) {\r\n      cast {\r\n        character\r\n        name\r\n        profile_path\r\n      }\r\n      crew {\r\n        job\r\n        name\r\n        profile_path\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Movie = ({ movie, genresList }) => {\r\n  const IMG_URL = \"http://image.tmdb.org/t/p\";\r\n  const convertGenres = genres => {\r\n    let convertgenresList = [];\r\n    genres.forEach(genre => {\r\n      genresList.forEach(list => {\r\n        if (list.id === genre) {\r\n          return convertgenresList.push(list);\r\n        }\r\n      });\r\n    });\r\n    return convertgenresList.map(genre => (\r\n      <Link to={`/genresearch/${genre.id}`} key={genre.id}>\r\n        #{genre.name}\r\n      </Link>\r\n    ));\r\n  };\r\n  return (\r\n    <div className=\"Movie\">\r\n      <Link to={`/detail/${movie.id}`}>\r\n        <div className=\"Movie-poster\">\r\n          <img\r\n            src={\r\n              movie.poster_path !== null\r\n                ? `${IMG_URL}/w500${movie.poster_path}`\r\n                : `/imgs/no-poster.png`\r\n            }\r\n            alt={`${movie.title}`}\r\n          />\r\n        </div>\r\n        <div className=\"Movie-title\">{movie.title}</div>\r\n        <div className=\"Movie-vote\">{movie.vote_average}</div>\r\n      </Link>\r\n      <div className=\"Movie-genres\">{convertGenres(movie.genre_ids)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass NowPlayingMovies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.scrollLoading = this.scrollLoading.bind(this);\r\n  }\r\n  scrollLoading() {\r\n    let documentHeight = document.documentElement.scrollHeight;\r\n    let windowHeight = window.innerHeight;\r\n    let scrollBarPosition = window.pageYOffset | document.body.scrollTop;\r\n    if (documentHeight === windowHeight + scrollBarPosition) {\r\n      this.props.onLoadMore();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App-Movies\">\r\n        <h2>\r\n          <i className=\"material-icons\">local_movies</i>\r\n          <span>최근 개봉작품</span>\r\n        </h2>\r\n        <div className=\"App-Movies-List\">\r\n          {this.props.nowPlaying.map(movie => {\r\n            return (\r\n              <Movie\r\n                key={movie.id}\r\n                movie={movie}\r\n                genresList={this.props.genresList}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NowPlayingMovies;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { NOW_PLAYING } from \"../queries\";\r\nimport NowPlayingMovies from \"./NowPlayingMovies\";\r\nimport update from \"react-addons-update\";\r\nconst NowPlayingQuery = () => {\r\n  return (\r\n    <div>\r\n      <Query query={NOW_PLAYING} variables={{ page: 1 }}>\r\n        {({ data, fetchMore, error, loading }) => {\r\n          if (loading) return <div className=\"Loading\">loading...</div>;\r\n          if (error)\r\n            return <div className=\"Error\">Error! Something happend.</div>;\r\n          const { genresList, nowPlaying } = data;\r\n          return (\r\n            <NowPlayingMovies\r\n              nowPlaying={nowPlaying.movies}\r\n              genresList={genresList}\r\n              totalPage={nowPlaying.total_pages}\r\n              onLoadMore={() => {\r\n                let newPage = Math.ceil(nowPlaying.movies.length / 20);\r\n                if (newPage === nowPlaying.total_pages) {\r\n                  return;\r\n                } else {\r\n                  newPage += 1;\r\n                  fetchMore({\r\n                    variables: {\r\n                      page: newPage\r\n                    },\r\n                    updateQuery: (prev, { fetchMoreResult }) => {\r\n                      if (!fetchMoreResult) return prev;\r\n                      return update(prev, {\r\n                        nowPlaying: {\r\n                          movies: { $push: fetchMoreResult.nowPlaying.movies }\r\n                        }\r\n                      });\r\n                    }\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }}\r\n      </Query>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NowPlayingQuery;\r\n","import React, { Component } from \"react\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass SearchedMovies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.scrollLoading = this.scrollLoading.bind(this);\r\n  }\r\n  scrollLoading() {\r\n    let documentHeight = document.documentElement.scrollHeight;\r\n    let windowHeight = window.innerHeight;\r\n    let scrollBarPosition = window.pageYOffset | document.body.scrollTop;\r\n    if (documentHeight === windowHeight + scrollBarPosition) {\r\n      this.props.onLoadMore();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App-Movies\">\r\n        <h2>\r\n          [<span>{`${this.props.searchTitle}`}</span>] 로 검색된 영화\r\n        </h2>\r\n        <div className=\"App-Movies-List\">\r\n          {this.props.search.map(movie => {\r\n            return (\r\n              <Movie\r\n                key={movie.id}\r\n                movie={movie}\r\n                genresList={this.props.genresList}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchedMovies;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { SEARCH } from \"../queries\";\r\nimport SearchedMovies from \"./../components/SearchedMovies\";\r\nimport update from \"react-addons-update\";\r\n\r\nconst Search = ({\r\n  match: {\r\n    params: { title }\r\n  }\r\n}) => {\r\n  const searchTitle = encodeURI(title);\r\n  return (\r\n    <Query query={SEARCH} variables={{ movieTitle: searchTitle, page: 1 }}>\r\n      {({ data, error, loading, fetchMore }) => {\r\n        if (loading) return <div className=\"Loading\">loading...</div>;\r\n        if (error)\r\n          return <div className=\"Error\">Error! Something happend.</div>;\r\n        const { genresList, search } = data;\r\n        return (\r\n          <SearchedMovies\r\n            search={search.movies}\r\n            searchTitle={title}\r\n            genresList={genresList}\r\n            totalPage={search.total_pages}\r\n            onLoadMore={() => {\r\n              let newPage = Math.ceil(search.movies.length / 20);\r\n              if (newPage === search.total_pages) {\r\n                return;\r\n              } else {\r\n                newPage += 1;\r\n                fetchMore({\r\n                  variables: {\r\n                    movieTitle: searchTitle,\r\n                    page: newPage\r\n                  },\r\n                  updateQuery: (prev, { fetchMoreResult }) => {\r\n                    if (!fetchMoreResult) return prev;\r\n                    return update(prev, {\r\n                      search: {\r\n                        movies: { $push: fetchMoreResult.search.movies }\r\n                      }\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass SearchedByGenreMovies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.scrollLoading = this.scrollLoading.bind(this);\r\n  }\r\n  scrollLoading() {\r\n    let documentHeight = document.documentElement.scrollHeight;\r\n    let windowHeight = window.innerHeight;\r\n    let scrollBarPosition = window.pageYOffset | document.body.scrollTop;\r\n    if (documentHeight === windowHeight + scrollBarPosition) {\r\n      this.props.onLoadMore();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  render() {\r\n    const genreIndex = this.props.genresList.findIndex(\r\n      list => list.id === this.props.genreId\r\n    );\r\n    return (\r\n      <div className=\"App-Movies\">\r\n        <h2>\r\n          장르별 검색 [\r\n          <span>{`${this.props.genresList[genreIndex].name}`}</span>]\r\n        </h2>\r\n        <div className=\"App-Movies-List\">\r\n          {this.props.genreSearch.map((movie, index) => {\r\n            return (\r\n              <Movie\r\n                key={index}\r\n                movie={movie}\r\n                genresList={this.props.genresList}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchedByGenreMovies;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { SEARCH_BY_GENRE } from \"../queries\";\r\nimport SearchedByGenreMovies from \"./SearchedByGenreMovies\";\r\nimport update from \"react-addons-update\";\r\n\r\nconst SearchByGenre = ({\r\n  match: {\r\n    params: { genre_id }\r\n  }\r\n}) => {\r\n  const genreId = parseInt(genre_id);\r\n  return (\r\n    <Query query={SEARCH_BY_GENRE} variables={{ genreId: genreId, page: 1 }}>\r\n      {({ data, error, loading, fetchMore }) => {\r\n        if (loading) return <div className=\"Loading\">loading...</div>;\r\n        if (error)\r\n          return <div className=\"Error\">Error! Something happend.</div>;\r\n        const { genresList, genreSearch } = data;\r\n        return (\r\n          <SearchedByGenreMovies\r\n            genreSearch={genreSearch.movies}\r\n            genresList={genresList}\r\n            genreId={genreId}\r\n            totalPage={genreSearch.total_pages}\r\n            onLoadMore={() => {\r\n              let newPage = Math.ceil(genreSearch.movies.length / 20);\r\n              if (newPage === genreSearch.total_pages) {\r\n                return;\r\n              } else {\r\n                newPage += 1;\r\n                fetchMore({\r\n                  variables: {\r\n                    genreId: genreId,\r\n                    page: newPage\r\n                  },\r\n                  updateQuery: (prev, { fetchMoreResult }) => {\r\n                    if (!fetchMoreResult) return prev;\r\n                    return update(prev, {\r\n                      genreSearch: {\r\n                        movies: { $push: fetchMoreResult.genreSearch.movies }\r\n                      }\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  );\r\n};\r\n\r\nexport default SearchByGenre;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\n\r\nconst DetailView = ({ detail, recommendations, credits, trailers }) => {\r\n  const IMG_URL = \"http://image.tmdb.org/t/p\";\r\n  const movieBackground = {\r\n    backgroundImage:\r\n      detail.backdrop_path !== null\r\n        ? `url(${IMG_URL}/original/${detail.backdrop_path})`\r\n        : \"\"\r\n  };\r\n\r\n  // const movieTrailers = trailers => {\r\n  //   if (trailers.length > 0) {\r\n  //     return (\r\n  //       <div className=\"movie-trailer\">\r\n  //         <h3>예고편 영상</h3>\r\n  //         <select>\r\n  //           {trailers.map(trailer => {\r\n  //             return <option key={trailer.key}>{trailer.name}</option>;\r\n  //           })}\r\n  //         </select>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  // };\r\n  class MovieTrailers extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      const options = this.props.trailers.map(trailer => {\r\n        return {\r\n          label: trailer.name,\r\n          value: trailer.key\r\n        };\r\n      });\r\n      this.state = {\r\n        options,\r\n        value: options[0]\r\n      };\r\n      this.handleSelectChange = this.handleSelectChange.bind(this);\r\n    }\r\n    handleSelectChange(selected) {\r\n      this.setState({ value: selected });\r\n    }\r\n    render() {\r\n      const { options, value } = this.state;\r\n      return (\r\n        <div className=\"movie-trailer\">\r\n          <h3>\r\n            <i className=\"material-icons\">video_library</i>\r\n            예고편 영상\r\n          </h3>\r\n          <Select\r\n            onChange={this.handleSelectChange}\r\n            value={value}\r\n            options={options}\r\n            className=\"react-select-container\"\r\n            classNamePrefix=\"react-select\"\r\n            // closeMenuOnSelect={false}\r\n            // menuIsOpen={true}\r\n          />\r\n          <div className=\"trailer-container\">\r\n            <iframe\r\n              title={`${value.label}`}\r\n              src={`https://www.youtube.com/embed/${value.value}?rel=0&modestbranding=1`}\r\n              allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n              frameBorder=\"0\"\r\n              allowFullScreen\r\n            ></iframe>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const recommendationsMovies = movies => {\r\n    if (movies.length > 0) {\r\n      return (\r\n        <div className=\"detail-recommendMovies\">\r\n          <h3>\r\n            <i className=\"material-icons\">movie</i> 관련 추천 영화\r\n          </h3>\r\n          <div className=\"detail-recommendMovies-wrapper\">\r\n            <div className=\"detail-Movies\" style={detailMovies}>\r\n              {movies.map(movie => {\r\n                return (\r\n                  <div className=\"Movie\" key={movie.id}>\r\n                    <Link to={`/detail/${movie.id}`}>\r\n                      <div className=\"Movie-poster\">\r\n                        <img\r\n                          src={\r\n                            movie.poster_path !== null\r\n                              ? `${IMG_URL}/w500${movie.poster_path}`\r\n                              : `/imgs/no-poster.png`\r\n                          }\r\n                          alt={`${movie.title}`}\r\n                        />\r\n                        <div className=\"Movie-vote\">{movie.vote_average}</div>\r\n                      </div>\r\n                      <div className=\"Movie-title\">{movie.title}</div>\r\n                    </Link>\r\n                    <div className=\"Movie-genres\" />\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  const creditsList = credits => {\r\n    if (credits.crew.length < 1 || credits.cast.length < 1) {\r\n      return;\r\n    }\r\n    const director = credits.crew.filter(item => item.job === \"Director\");\r\n    const newCredits = [director[0], ...credits.cast];\r\n    const creditsWidth = {\r\n      width: 160 * newCredits.length - 10\r\n    };\r\n    return (\r\n      <div className=\"detail-credits\">\r\n        <h3>\r\n          <i className=\"material-icons\">recent_actors</i>감독 및 출연진\r\n        </h3>\r\n        <div className=\"detail-credits-wrapper\">\r\n          <div className=\"credits-list\" style={creditsWidth}>\r\n            {newCredits.map((item, index) => {\r\n              return (\r\n                <div className=\"credits-profile\" key={index}>\r\n                  <div className=\"profile-pic\">\r\n                    {item.profile_path !== null ? (\r\n                      <img\r\n                        src={`${IMG_URL}/w300${item.profile_path}`}\r\n                        alt={`${item.name}`}\r\n                      />\r\n                    ) : (\r\n                      <img\r\n                        className=\"defaultAvatar\"\r\n                        src=\"/imgs/default-avatar.jpg\"\r\n                        alt={item.name}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                  <div className=\"profile-info\">\r\n                    <span className=\"profile-charge\">\r\n                      {index === 0 ? (\r\n                        \"감독\"\r\n                      ) : (\r\n                        <span>\r\n                          <span>{item.character}</span> 역\r\n                        </span>\r\n                      )}\r\n                    </span>\r\n                    <span className=\"profile-name\">{item.name}</span>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  const detailMovies = {\r\n    width: 196 * recommendations.movies.length - 16\r\n  };\r\n  return (\r\n    <div className=\"App-Movie-detail\">\r\n      <div className=\"detail-wrapper\">\r\n        <div className=\"detail-bg\" style={movieBackground} />\r\n        <div className=\"detail-poster\">\r\n          <img\r\n            src={\r\n              detail.poster_path !== null\r\n                ? `${IMG_URL}/w500${detail.poster_path}`\r\n                : `/imgs/no-poster.png`\r\n            }\r\n            alt={`${detail.title}`}\r\n          />\r\n        </div>\r\n        <div className=\"detail-title\">\r\n          <h2>\r\n            <span>{detail.title}</span>\r\n            <span className=\"originalTitle\">{detail.original_title}</span>\r\n          </h2>\r\n          <div className=\"detail-vote\">{detail.vote_average}</div>\r\n        </div>\r\n        {detail.genres.length > 0 ? (\r\n          <div className=\"detail-genres\">\r\n            {detail.genres.map((genre, index) => {\r\n              return (\r\n                <Link key={index} to={`/genresearch/${genre.id}`}>\r\n                  #{genre.name}\r\n                </Link>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"detail-favorite-release-runTime\">\r\n          <div className=\"detail-favorite\">\r\n            <i className=\"material-icons\">favorite</i>\r\n            <span>{detail.vote_count}</span>\r\n          </div>\r\n          <div className=\"detail-release-runTime\">\r\n            {detail.release_date !== \"\" ? (\r\n              <div className=\"detail-release\">\r\n                <i className=\"material-icons\">date_range</i>\r\n                <span>{detail.release_date}</span>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {detail.runtime !== null ? (\r\n              <div className=\"detail-runTime\">\r\n                <i className=\"material-icons\">access_time</i>\r\n                <span>{detail.runtime} min</span>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n        {detail.tagline !== \"\" ? (\r\n          <div className=\"detail-tagline\">\"{detail.tagline}\"</div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"detail-overview\">{detail.overview}</div>\r\n        {trailers.length > 0 ? <MovieTrailers trailers={trailers} /> : \"\"}\r\n        {creditsList(credits)}\r\n        {recommendationsMovies(recommendations.movies)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailView;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { MOVIE_DETAIL } from \"./../queries\";\r\nimport DetailView from \"./DetailView\";\r\n\r\nconst Detail = ({\r\n  match: {\r\n    params: { movie_id }\r\n  }\r\n}) => {\r\n  return (\r\n    <Query query={MOVIE_DETAIL} variables={{ movieId: parseInt(movie_id) }}>\r\n      {({ loading, error, data }) => {\r\n        if (loading) return <div className=\"Loading\">loading...</div>;\r\n        if (error)\r\n          return <div className=\"Error\">Error! Something happend.</div>;\r\n        return (\r\n          <DetailView\r\n            detail={data.detail}\r\n            recommendations={data.recommendations}\r\n            credits={data.credits}\r\n            trailers={data.trailers}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import React, { Component } from \"react\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass TopRatedMovies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.scrollLoading = this.scrollLoading.bind(this);\r\n  }\r\n  scrollLoading() {\r\n    let documentHeight = document.documentElement.scrollHeight;\r\n    let windowHeight = window.innerHeight;\r\n    let scrollBarPosition = window.pageYOffset | document.body.scrollTop;\r\n    if (documentHeight === windowHeight + scrollBarPosition) {\r\n      this.props.onLoadMore();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App-Movies\">\r\n        <h2>\r\n          <i className=\"material-icons\">local_movies</i>\r\n          <span>평점 높은 영화</span>\r\n        </h2>\r\n        <div className=\"App-Movies-List\">\r\n          {this.props.topRated.map(movie => {\r\n            return (\r\n              <Movie\r\n                key={movie.id}\r\n                movie={movie}\r\n                genresList={this.props.genresList}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopRatedMovies;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { TOP_RATED } from \"../queries\";\r\nimport TopRatedMovies from \"./TopRatedMovies\";\r\nimport update from \"react-addons-update\";\r\nconst TopRated = () => {\r\n  return (\r\n    <Query query={TOP_RATED} variables={{ page: 1 }}>\r\n      {({ data, fetchMore, error, loading }) => {\r\n        if (loading) return <div className=\"Loading\">loading...</div>;\r\n        if (error)\r\n          return <div className=\"Error\">Error! Something happend.</div>;\r\n        const { genresList, topRated } = data;\r\n        return (\r\n          <TopRatedMovies\r\n            topRated={topRated.movies}\r\n            genresList={genresList}\r\n            totalPage={topRated.total_pages}\r\n            onLoadMore={() => {\r\n              let newPage = Math.ceil(topRated.movies.length / 20);\r\n              if (newPage === topRated.total_pages) {\r\n                return;\r\n              } else {\r\n                newPage += 1;\r\n                fetchMore({\r\n                  variables: {\r\n                    page: newPage\r\n                  },\r\n                  updateQuery: (prev, { fetchMoreResult }) => {\r\n                    if (!fetchMoreResult) return prev;\r\n                    return update(prev, {\r\n                      topRated: {\r\n                        movies: { $push: fetchMoreResult.topRated.movies }\r\n                      }\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  );\r\n};\r\n\r\nexport default TopRated;\r\n","import React, { Component } from \"react\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass UpcomingMovies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.scrollLoading = this.scrollLoading.bind(this);\r\n  }\r\n  scrollLoading() {\r\n    let documentHeight = document.documentElement.scrollHeight;\r\n    let windowHeight = window.innerHeight;\r\n    let scrollBarPosition = window.pageYOffset | document.body.scrollTop;\r\n    if (documentHeight === windowHeight + scrollBarPosition) {\r\n      this.props.onLoadMore();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App-Movies\">\r\n        <h2>\r\n          <i className=\"material-icons\">local_movies</i>\r\n          <span>상영 예정작</span>\r\n        </h2>\r\n        <div className=\"App-Movies-List\">\r\n          {this.props.upComing.map(movie => {\r\n            return (\r\n              <Movie\r\n                key={movie.id}\r\n                movie={movie}\r\n                genresList={this.props.genresList}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UpcomingMovies;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { UPCOMING } from \"../queries\";\r\nimport UpcomingMovies from \"./UpcomingMovies\";\r\nimport update from \"react-addons-update\";\r\nconst Upcoming = () => {\r\n  return (\r\n    <Query query={UPCOMING} variables={{ page: 1 }}>\r\n      {({ data, fetchMore, error, loading }) => {\r\n        if (loading) return <div className=\"Loading\">loading...</div>;\r\n        if (error)\r\n          return <div className=\"Error\">Error! Something happend.</div>;\r\n        const { genresList, upComing } = data;\r\n        return (\r\n          <UpcomingMovies\r\n            upComing={upComing.movies}\r\n            genresList={genresList}\r\n            totalPage={upComing.total_pages}\r\n            onLoadMore={() => {\r\n              let newPage = Math.ceil(upComing.movies.length / 20);\r\n              if (newPage === upComing.total_pages) {\r\n                return;\r\n              } else {\r\n                newPage += 1;\r\n                fetchMore({\r\n                  variables: {\r\n                    page: newPage\r\n                  },\r\n                  updateQuery: (prev, { fetchMoreResult }) => {\r\n                    if (!fetchMoreResult) return prev;\r\n                    return update(prev, {\r\n                      upComing: {\r\n                        movies: { $push: fetchMoreResult.upComing.movies }\r\n                      }\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  );\r\n};\r\n\r\nexport default Upcoming;\r\n","import React, { Component } from \"react\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass popularMovies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.scrollLoading = this.scrollLoading.bind(this);\r\n  }\r\n  scrollLoading() {\r\n    let documentHeight = document.documentElement.scrollHeight;\r\n    let windowHeight = window.innerHeight;\r\n    let scrollBarPosition = window.pageYOffset | document.body.scrollTop;\r\n    if (documentHeight === windowHeight + scrollBarPosition) {\r\n      this.props.onLoadMore();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"scroll\", this.scrollLoading);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App-Movies\">\r\n        <h2>\r\n          <i className=\"material-icons\">local_movies</i>\r\n          <span>인기 영화</span>\r\n        </h2>\r\n        <div className=\"App-Movies-List\">\r\n          {this.props.popular.map(movie => {\r\n            return (\r\n              <Movie\r\n                key={movie.id}\r\n                movie={movie}\r\n                genresList={this.props.genresList}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default popularMovies;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { POPULAR } from \"../queries\";\r\nimport PopularMovies from \"./PopularMovies\";\r\nimport update from \"react-addons-update\";\r\nconst Popular = () => {\r\n  return (\r\n    <Query query={POPULAR} variables={{ page: 1 }}>\r\n      {({ data, fetchMore, error, loading }) => {\r\n        if (loading) return <div className=\"Loading\">loading...</div>;\r\n        if (error)\r\n          return <div className=\"Error\">Error! Something happend.</div>;\r\n        const { genresList, popular } = data;\r\n        return (\r\n          <PopularMovies\r\n            popular={popular.movies}\r\n            genresList={genresList}\r\n            totalPage={popular.total_pages}\r\n            onLoadMore={() => {\r\n              let newPage = Math.ceil(popular.movies.length / 20);\r\n              if (newPage === popular.total_pages) {\r\n                return;\r\n              } else {\r\n                newPage += 1;\r\n                fetchMore({\r\n                  variables: {\r\n                    page: newPage\r\n                  },\r\n                  updateQuery: (prev, { fetchMoreResult }) => {\r\n                    if (!fetchMoreResult) return prev;\r\n                    return update(prev, {\r\n                      popular: {\r\n                        movies: { $push: fetchMoreResult.popular.movies }\r\n                      }\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  );\r\n};\r\n\r\nexport default Popular;\r\n","import React, { Component } from \"react\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport NowPlaying from \"./components/NowPlaying\";\nimport Search from \"./components/Search\";\nimport SearchByGenre from \"./components/SearchByGenre\";\nimport Detail from \"./components/Detail\";\nimport TopRated from \"./components/TopRated\";\nimport Upcoming from \"./components/Upcoming\";\nimport Popular from \"./components/Popular\";\nimport \"./css/App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n  handleKeyDown(e) {\n    if (e.keyCode === 13) {\n      if (e.target.value.length < 1) {\n        return;\n      }\n      let search = encodeURIComponent(e.target.value);\n      this.props.history.push(`/search/${search}`);\n    }\n  }\n  render() {\n    const subMenus = [\n      {\n        name: \"New Releases\",\n        path: \"/\"\n      },\n      {\n        name: \"Popular Movies\",\n        path: \"/popular\"\n      },\n      {\n        name: \"Top Rated\",\n        path: \"/toprated\"\n      },\n      {\n        name: \"Coming Soon\",\n        path: \"/upcoming\"\n      }\n    ];\n    const printSubMenus = subMenus.map((menu, index) => {\n      const checked = this.props.location.pathname === menu.path;\n      return (\n        <Link to={menu.path} key={index} className={`${checked ? \"on\" : \"\"}`}>\n          <i className=\"material-icons\">arrow_right</i>\n          {menu.name}\n        </Link>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-header-top\">\n            <h1>\n              <i className=\"material-icons\">signal_cellular_alt</i>\n              <Link to=\"/\">\n                ZOMB <span>MOVIES</span>\n              </Link>\n            </h1>\n            <div className=\"App-searchBox\">\n              <i className=\"material-icons\">search</i>\n              <input\n                type=\"text\"\n                placeholder=\"Search movies...\"\n                onKeyDown={this.handleKeyDown}\n              />\n            </div>\n          </div>\n          <div className=\"App-header-subMenus\">{printSubMenus}</div>\n        </div>\n        <Switch>\n          <Route path=\"/toprated\" component={TopRated} />\n          <Route path=\"/upcoming\" component={Upcoming} />\n          <Route path=\"/popular\" component={Popular} />\n          <Route path=\"/search/:title\" component={Search} />\n          <Route path=\"/detail/:movie_id\" component={Detail} />\n          <Route path=\"/genresearch/:genre_id\" component={SearchByGenre} />\n          <Route component={NowPlaying} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import \"./polyfills\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport client from \"./apolloClient\";\nimport App from \"./App\";\n\nimport \"reset-css\";\nimport \"./css/default.css\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={App} />\n      </Switch>\n    </BrowserRouter>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}